head(cameraData)
cameraData<-read.table("./data/cameras.csv",sep=",",header= T)
install.packages("xlsx")
##Download Excel data from the internet
library(xlsx)
data<-read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
View(data)
agricultureLogical<- !is.na(data$ACR) & data$ACR==3 & !is.na(data$AGS) & data$AGS == 6
which(agricultureLogical
which(agricultureLogical)
which(agricultureLogical)
install.packages(jpeg)
install.packages("jpeg")
library("jpeg")
img<-readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native=TRUE)
img<-readJPEG("https://d396qusza40orc.cloudfront.net/getdata-jeff.jpg", native=TRUE)
img <- readJPEG(system.file("img", "Rlogo.jpg", package="jpeg"))
img <- readJPEG("img", "Rlogo.jpg", package="jpeg")
?readJPEG
?system.file
system.file("img", "Rlogo.jpg", package="jpeg")
test<-readJPEG("Einstein_1_JPEG.jpg")
?readJPEG
install.packages("rasterImage")
install.packages("graphics")
library(graphics)
img<-readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", native=TRUE)
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
img<-readJPEG(url, native=TRUE)
?readJPEG
img<-readJPEG("getdata%2Fjeff.jpg", native=TRUE)
img<-readJPEG(system.file("img", "getdata-jeff.jpg", package="jpeg"), native=TRUE)
download.file(url,system.file("img", "getdata-jeff.jpg", package="jpeg"))
download.file(url, destfile=system.file("img", "getdata-jeff.jpg", package="jpeg"))
download.file(url, destfile=system.file("img", "getdata%2Fjeff.jpg", package="jpeg"))
quantile(img,probs=0.30)
quantile(img,probs=0.30)
quantile(img,probs=0.80)
data3a<-read,csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv")
data3b<-read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv")
data3a<-read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv")
View(data3a)
data3<-data3a[5:194,c("X","X.3")]
View(data3)
?match
match(data3$X,data3b$CountryCode,nomatch=NA)
?lookup
sum(!is.na(match(data3$X,data3b$CountryCode,nomatch=NA)))
students <- data.frame(people=c("Lily", "Bo", "Jen", "Omar", "Sara", "Jack", "Ting"), team=c("Red", "Blue", "Green", "Red", "Blue", "Green", "Red"), number=c(1,2,3,5,2,7,1))
students
scores <- data.frame(team=c("Black", "Blue", "Green", "Indigo", "Orange", "Red", "Violet", "White", "Yellow"), score1=c(90,96,93,88,82,84,95,89,79), score2=c(5,5,4,4,5,3,5,5,3))
scores
score1 <- rep(NA, 7)
score2 <- rep(NA, 7)
students <- data.frame(students, score1, score2)
students
students$score1 <- scores$score1[match(students$team, scores$team)]
students$score2 <- scores$score2[match(students$team, scores$team)]
students
View(data3b)
cbind(data3,data3b$Long.Name[data3c])
cbind(data3,data3b$Long.Name [data3c])
cbind(data3,data3b$Long.Name [[data3c]])
data3b$Long.Name [[data3c]]
data3c<-sum(!is.na(match(data3$X,data3b$CountryCode,nomatch=NA)))
data3c<-!is.na(match(data3$X,data3b$CountryCode,nomatch=NA))
cbind(data3,data3b[data3c,2])
data3c
data3c<-match(data3$X,data3b$CountryCode,nomatch=NA)
data3c
cbind(data3,data3b[data3c,2])
cbind(data3,Name=data3b[data3c,2])
View(data3)
View(data3)
data3a<-read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv")
data3b<-read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv")
data3<-data3a[5:194,c("X","X.3")]
data3c<-match(data3$X,data3b$CountryCode,nomatch=NA)
data3<-cbind(data3,Name=data3b[data3c,2])
View(data3)
?arrange
?order
order(data3,na.last=TRUE, decreasing=FALSE)
data3[order(data3,na.last=TRUE, decreasing=FALSE),]
names(data3)
names(data3)<-c("CODE","GDP")
names(data3)
View(data3)
View(data3)
data3a<-read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv")
data3b<-read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv")
data3<-data3a[5:194,c("X","X.3")]
names(data3)<-c("CODE","GDP")
data3c<-match(data3$CODE,data3b$CountryCode,nomatch=NA)
data3<-cbind(data3,Name=data3b[data3c,2])
order.gdp<-order(data3$GDP)
View(data3)
data3[order.gdp,]
View(data3a)
View(data3b)
data3<-cbind(data3,Income=data3b[data3c,3])
View(data3)
getdir()
detwd()
getwd()
data1<-read.table("data1.txt")
View(data1)
data2<-read.table("data2.txt")
View(data2)
data2<-read.table("data2.txt",header=T)
View(data2)
data3<-read.table("data3.txt")
View(data3)
data3<-read.table("data3.txt")
View(data3)
rm(data3)
data3<-read.table("data3.txt")
View(data3)
data4<-read.table("data4.txt")
View(data4)
getwd()
setwd("C:/Users/Gustavo/Desktop/RepData_PeerAssessment1")
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
?Aggregate
?aggregate
library(lattice)
install.packages("lattice")
install.packages("lattice")
?aes
?ggplot
requiere(ggplot2)
require(ggplot2)
?ggplot
?aes
# STEPS PER DAY
# Calculate the sum of the steps taken each day
stepsByDate <- ddply(data,~date,summarise,steps=sum(steps))
# Calculate the mean and median number of steps taken per day
meanSteps <- mean(stepsByDate$steps,na.rm=TRUE)
medianSteps <- median(stepsByDate$steps,na.rm=TRUE)
# Plot a histogram of the number of steps taken per day
hist(stepsByDate$steps,breaks=10,            # plotting the histogram
xlab="Total Daily Steps",               # label the x axis
main="Distribution of Steps Per Day",   # set the title
ylim=c(0,20),                           # set the range of the y axis
col="bisque",                           # color the bars
xlim=c(0,25000),                        # set range of x axis
las=1)                                  # rotate y axis labels
data <- read.csv("./activity.csv")
# Define weekends and weekdays for later
data[,2] <- as.Date(data[,2])   # define the factors as dates
day <- as.vector(NULL)          # vector to collect new factor values
for(temp in 1:nrow(data)){
if(weekdays(data[temp,2])=="Saturday" | weekdays(data[temp,2])=="Sunday"){
day[temp] <- "weekend"
} else {
day[temp] <- "weekday"
}
}
data <- cbind(data,day)         # add new factors to the data frame
# New data with NA replaced by imputed means of intervals
imputedMean <- function(x) replace(x, is.na(x), mean(x, na.rm=TRUE))
imputedData <- ddply(data, ~interval, transform, steps = imputedMean(steps))
library(plyr)
data <- read.csv("./activity.csv")
# Define weekends and weekdays for later
data[,2] <- as.Date(data[,2])   # define the factors as dates
day <- as.vector(NULL)          # vector to collect new factor values
for(temp in 1:nrow(data)){
if(weekdays(data[temp,2])=="Saturday" | weekdays(data[temp,2])=="Sunday"){
day[temp] <- "weekend"
} else {
day[temp] <- "weekday"
}
}
data <- cbind(data,day)         # add new factors to the data frame
# New data with NA replaced by imputed means of intervals
imputedMean <- function(x) replace(x, is.na(x), mean(x, na.rm=TRUE))
imputedData <- ddply(data, ~interval, transform, steps = imputedMean(steps))
# STEPS PER DAY
# Calculate the sum of the steps taken each day
stepsByDate <- ddply(data,~date,summarise,steps=sum(steps))
# Calculate the mean and median number of steps taken per day
meanSteps <- mean(stepsByDate$steps,na.rm=TRUE)
medianSteps <- median(stepsByDate$steps,na.rm=TRUE)
# Plot a histogram of the number of steps taken per day
hist(stepsByDate$steps,breaks=10,            # plotting the histogram
xlab="Total Daily Steps",               # label the x axis
main="Distribution of Steps Per Day",   # set the title
ylim=c(0,20),                           # set the range of the y axis
col="bisque",                           # color the bars
xlim=c(0,25000),                        # set range of x axis
las=1)                                  # rotate y axis labels
?hist
?hist
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
destFile <- "activity.zip"
unzippedFile <- "activity.csv"
if(!file.exists(destFile)){download.file(fileUrl,destfile = destFile)}
if(!file.exists(unzippedFile)){unzip(destFile) }
data <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
data$month <- as.numeric(format(data$date, "%m"))
noNA <- na.omit(data)
rownames(noNA) <- 1:nrow(noNA)
library(ggplot2)
hist(noNa)
hist(noNA)
View(noNA)
View(noNA)
hist(noNA$steps)
ggplot(noNA, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
boxplot(noNA$steps)
boxplot(log10(noNA$steps))
summary(noNA$steps)
hist(noNA$steps)
stepsByDate <- ddply(data,~date,summarise,steps=sum(steps))
View(stepsByDate)
View(stepsByDate)
hist(stepsByDate)
View(stepsByDate)
hist(stepsByDate$steps ~ stepsByDate$date)
hist(stepsByDate$steps)
?ddply
?hist
hist(stepsByDate$steps,breaks=log2(length(stepsByDate$steps)))
log2(length(stepsByDate$steps)
log2(length(stepsByDate$steps))
hist(stepsByDate$steps,breaks=log2(length(stepsByDate$steps))+1)
hist(stepsByDate$steps,breaks=6)
hist(stepsByDate$steps,breaks=3)
hist(stepsByDate$steps, col= "blue")
hist(stepsByDate$steps, col= "cyan")
hist(stepsByDate$steps, col= "turquoise")
?col
# extract an off-diagonal of a matrix
ma <- matrix(1:12, 3, 4)
ma[row(ma) == col(ma) + 1]
ma
?color
hist(stepsByDate$steps, col= "steelblue")
stepsByDate <- ddply(data,~date,summarise,steps=sum(steps))
hist(stepsByDate$steps, col= "steelblue", main = "Histogram of Steps by Date")
ggplot(stepsByDate, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue", width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
?ggplot
ggplot(stepsByDate, fill = "steelblue", width = 0.7) + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day", x = "Date", y = "Total number of steps")
ggplot(stepsByDate)
hist(stepsByDate$steps, col= "steelblue", border="navy", main = "Histogram of Dialy Steps")
hist(stepsByDate$steps, col= "steelblue", border="steelblue", main = "Histogram of Dialy Steps")
stepsByDate <- ddply(data,~date,summarise,steps=sum(steps))
hist(stepsByDate$steps,
col= "steelblue",
main = "Histogram of Dialy Steps")
totalSteps <- aggregate(noNA$steps, list(Date = noNA$date), FUN = "sum")$x
mean(totalSteps)
mean(stepsByDate)
mean(stepsByDate$steps)
mean(stepsByDate$steps,na.rm=TRUE)
median(totalSteps)
median(stepsByDate$steps,na.rm=TRUE)
avgSteps <- aggregate(noNA$steps, list(interval = as.numeric(as.character(noNA$interval))), FUN = "mean")
names(avgSteps)[2] <- "meanOfSteps"
ggplot(avgSteps, aes(interval, meanOfSteps)) + geom_line(color = "steelblue", size = 0.8) + labs(title = "Time Series Plot of the 5-minute Interval", x = "5-minute intervals", y = "Average Number of Steps Taken")
avgSteps[avgSteps$meanOfSteps == max(avgSteps$meanOfSteps), ]
View(avgSteps)
library(ggplot2)
View(data)
stepsByInterval <- ddply(data,~interval,summarise,steps=sum(steps,na.rm=TRUE))
View(stepsByInterval)
View(stepsByInterval)
View(data)
stepsByInterval <- ddply(data,~interval,summarise,steps=sum(steps))
View(stepsByInterval)
stepsByInterval <- ddply(data,~interval,summarise,steps=sum(steps))
View(stepsByInterval)
View(stepsByInterval)
View(stepsByInterval)
stepsByInterval <- ddply(data,~interval,summarise,steps=sum(steps))
View(stepsByInterval)
rm(stepsByInterval)
stepsByInterval <- ddply(data,~interval,summarise,steps=sum(steps))
View(stepsByInterval)
stepsByInterval <- ddply(data,~interval,summarise,steps=sum(steps,na.rm=TRUE))
View(stepsByInterval)
plot(stepsByInterval)
plot(stepsByInterval$steps,stepsByInterval$interval)
plot(stepsByInterval$interval,stepsByInterval$steps)
View(stepsByInterval)
View(stepsByDate)
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
destFile <- "activity.zip"
unzippedFile <- "activity.csv"
if(!file.exists(destFile)){download.file(fileUrl,destfile = destFile)}
if(!file.exists(unzippedFile)){unzip(destFile) }
data <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
data$month <- as.numeric(format(data$date, "%m"))
noNA <- na.omit(data)
rownames(noNA) <- 1:nrow(noNA)
stepsByDate <- ddply(data,~date,summarise,steps=sum(steps))
hist(stepsByDate$steps,
col= "steelblue",
main = "Histogram of Dialy Steps")
mean(stepsByDate$steps,na.rm=TRUE)
median(stepsByDate$steps,na.rm=TRUE)
stepsByInterval <- ddply(data,~interval,summarise,steps=sum(steps,na.rm=TRUE))
plot(stepsByInterval$interval,stepsByInterval$steps)
View(stepsByInterval)
?plot
plot(stepsByInterval$interval,stepsByInterval$steps,type="l")
plot(interval,steps,type="l")
attach(stepsByInterval)
plot(interval,steps,type="l")
plot(interval,steps,type = "l")
plot(steps,type = "l")
plot(steps,type = "l",col="steelBlue")
stepsByInterval <- ddply(data,~interval,summarise,steps=mean(steps,na.rm=TRUE))
attach(stepsByInterval)
plot(steps,
type = "l",
main = ""
col="steelBlue"
)
plot(steps,
type = "l",
main = "a"
col="steelBlue"
)
plot(steps,
type = "l",
col="steelBlue"
)
View(stepsByInterval)
plot(steps,
type = "l",
main = "Average Steps by 5-minute Interval"
col="steelBlue"
)
plot(steps,
type = "l",
main = "Average Steps by 5-minute Interval",
col="steelBlue"
)
hist(stepsByDate$steps,
col= "steelblue",
main = "Histogram of Dialy Steps")
hist(stepsByDate$steps,
col= "steelblue",
main = "Histogram of Dialy Steps")
hist(stepsByDate$steps,
col= "steelblue",
main = "Histogram of Dialy Steps",
xlab = "Number of Steps")
stepsByInterval <- ddply(data,~interval,summarise,steps=mean(steps,na.rm=TRUE))
attach(stepsByInterval)
plot(steps,
type = "l",
main = "Average Steps by 5-minute Interval",
col="steelBlue"
)
require(stats)
x <- swiss$Education[1:25]
x; sort(x); sort(x, partial = c(10, 15))
stepsByInterval <- stepsByInterval[order(interval),]
View(stepsByInterval)
stepsByInterval <- ddply(data,~interval,summarise,steps=mean(steps,na.rm=TRUE))
stepsByInterval <- stepsByInterval[order(interval),]
View(stepsByInterval)
attach(stepsByInterval)
plot(steps,
type = "l",
main = "Average Steps by 5-minute Interval",
col="steelBlue"
)
stepsByInterval <- ddply(data,~interval,summarise,steps=mean(steps,na.rm=TRUE))
stepsByInterval <- stepsByInterval[order(interval),]
View(stepsByInterval)
View(stepsByInterval)
stepsByInterval <- ddply(data,~interval,summarise,steps=mean(steps,na.rm=TRUE))
attach(stepsByInterval)
View(stepsByInterval)
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
destFile <- "activity.zip"
unzippedFile <- "activity.csv"
if(!file.exists(destFile)){download.file(fileUrl,destfile = destFile)}
if(!file.exists(unzippedFile)){unzip(destFile) }
data <- read.csv("activity.csv", colClasses = c("integer", "Date", "factor"))
data$month <- as.numeric(format(data$date, "%m"))
noNA <- na.omit(data)
rownames(noNA) <- 1:nrow(noNA)
stepsByDate <- ddply(data,~date,summarise,steps=sum(steps))
hist(stepsByDate$steps,
col= "steelblue",
main = "Histogram of Dialy Steps",
xlab = "Number of Steps")
mean(stepsByDate$steps,na.rm=TRUE)
median(stepsByDate$steps,na.rm=TRUE)
stepsByInterval <- ddply(data,~interval,summarise,Steps=mean(steps,na.rm=TRUE))
stepsByInterval <- stepsByInterval[order(interval),]
plot(stepsByInterval$Steps,
type = "l",
main = "Average Steps by 5-minute Interval",
col="steelBlue")
avgSteps[avgSteps$meanOfSteps == max(avgSteps$meanOfSteps), ]
stepsByInterval[stepsByInterval$steps == max(stepsByInterval$steps)]
View(stepsByInterval)
stepsByInterval <- ddply(data,~interval,summarise,Steps=mean(steps,na.rm=TRUE))
plot(stepsByInterval$Steps,
type = "l",
main = "Average Steps by 5-minute Interval",
col="steelBlue")
stepsByInterval[stepsByInterval$steps == max(stepsByInterval$steps),]
stepsByInterval[stepsByInterval$Steps == max(stepsByInterval$Steps),]
sum(is.na(data))
newData <- data
View(newData)
for (i in 1:nrow(newData)) {
if (is.na(newData$steps[i])) {
newData$steps[i] <- avgSteps[which(newData$interval[i] == avgSteps$interval), ]$meanOfSteps
}
}
for (i in 1:nrow(newData)) {
if (is.na(newData$steps[i])) {
newData$steps[i] <- avgSteps[which(newData$interval[i] == avgSteps$interval), ]$meanOfSteps
newData$steps[i] <- stepsByInterval[which(newData$interval[i] == stepsByInterval$interval), ]$Steps
}
}
newData <- data
for (i in 1:nrow(newData)) {
if (is.na(newData$steps[i])) {
newData$steps[i] <- stepsByInterval[which(newData$interval[i] == stepsByInterval$interval), ]$Steps
}
}
View(newData)
head(newData)
sum(is.na(newData))
newStepsByDate <- ddply(newData,~date,summarise,steps=sum(steps))
hist(newStepsByDate$steps,
col= "steelblue",
main = "Histogram of Dialy Steps w/o NAs",
xlab = "Number of Steps")
getwd()
newTotalSteps <- aggregate(newData$steps,
list(Date = newData$date),
FUN = "sum")$x
newMean <- mean(newTotalSteps)
newMean
newMedian <- median(newTotalSteps)
newMedian
oldMean <- mean(totalSteps)
oldMedian <- median(totalSteps)
newMean - oldMean
newMedian - oldMedian
oldMean <- mean(stepsByDate$steps,na.rm=TRUE)
oldMedian <- median(stepsByDate$steps,na.rm=TRUE)
newMean - oldMean
newMedian - oldMedian
head(newData)
newData$weekdays <- factor(format(newData$date, "%A"))
levels(newData$weekdays)
levels(newData$weekdays) <- list(weekday = c("Monday", "Tuesday",
"Wednesday",
"Thursday", "Friday"),
weekend = c("Saturday", "Sunday"))
levels(newData$weekdays)
table(newData$weekdays)
avgSteps <- aggregate(newData$steps,
list(interval = as.numeric(as.character(newData$interval)),
weekdays = newData$weekdays),
FUN = "mean")
names(avgSteps)[3] <- "meanOfSteps"
library(lattice)
xyplot(avgSteps$meanOfSteps ~ avgSteps$interval | avgSteps$weekdays,
layout = c(1, 2), type = "l",
xlab = "Interval", ylab = "Number of steps")
avgSteps <- aggregate(newData$steps,
list(interval = as.numeric(as.character(newData$interval)),
weekdays = newData$weekdays),
FUN = "mean")
names(avgSteps)[3] <- "meanOfSteps"
library(lattice)
install.packages
install.packages()
installed.packages()
installed.packages(lattice)
installed.packages("lattice")
install.packages("lattice")
install.packages("lattice")
xyplot(avgSteps$meanOfSteps ~ avgSteps$interval | avgSteps$weekdays,
layout = c(1, 2), type = "l",
xlab = "Interval", ylab = "Number of steps")
avgSteps <- aggregate(newData$steps,
list(interval = as.numeric(as.character(newData$interval)),
weekdays = newData$weekdays),
FUN = "mean")
names(avgSteps)[3] <- "meanOfSteps"
library(lattice)
plot(avgSteps$interval,
avgSteps$meanOfSteps)
View(avgSteps)
avgSteps <- aggregate(newData$steps,
list(interval = as.numeric(as.character(newData$interval)),
weekdays = newData$weekdays),
FUN = "mean")
names(avgSteps)[3] <- "meanOfSteps"
View(newData)
stepsByDate <- ddply(data,~date,summarise,steps=sum(steps))
stepsByDate <- ddply(data,~date,summarise,steps=sum(steps))
library(ddply)
library("plyr")
?markdown
install.packages("knitr")
